"""
@generated
cargo-raze crate build file.

DO NOT EDIT! Replaced on runs of cargo-raze
"""

# buildifier: disable=load
load("@bazel_skylib//lib:selects.bzl", "selects")

# buildifier: disable=load
load(
    "@rules_rust//rust:defs.bzl",
    "rust_binary",
    "rust_library",
    "rust_proc_macro",
    "rust_test",
)

package(default_visibility = [
    # Public for visibility by "@raze__crate__version//" targets.
    #
    # Prefer access through "//cargo", which limits external
    # visibility to explicit Cargo.toml dependencies.
    "//visibility:public",
])

licenses([
    "notice",  # Apache-2.0 from expression "Apache-2.0 OR MIT"
])

# Generated Targets

# Unsupported target "ev_core" with type "example" omitted

# Unsupported target "web" with type "example" omitted

rust_library(
    name = "gilrs_core",
    srcs = glob(["**/*.rs"]),
    aliases = {
    },
    crate_features = [
        "js-sys",
        "wasm-bindgen",
        "web-sys",
    ],
    crate_root = "src/lib.rs",
    data = [],
    edition = "2018",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "crate-name=gilrs-core",
        "manual",
    ],
    version = "0.3.2",
    # buildifier: leave-alone
    deps = [
        "@cargo__log__0_4_14//:log",
        "@cargo__uuid__0_8_2//:uuid",
    ] + selects.with_or({
        # cfg(target_arch = "wasm32")
        (
            "@rules_rust//rust/platform:wasm32-unknown-unknown",
            "@rules_rust//rust/platform:wasm32-wasi",
        ): [
            "@cargo__js_sys__0_3_56//:js_sys",
            "@cargo__stdweb__0_4_20//:stdweb",
            "@cargo__web_sys__0_3_56//:web_sys",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(target_os = "linux")
        (
            "@rules_rust//rust/platform:i686-unknown-linux-gnu",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-unknown-linux-gnueabi",
            "@rules_rust//rust/platform:powerpc-unknown-linux-gnu",
            "@rules_rust//rust/platform:s390x-unknown-linux-gnu",
        ): [
            "@cargo__libc__0_2_114//:libc",
            "@cargo__libudev_sys__0_1_4//:libudev_sys",
            "@cargo__nix__0_23_1//:nix",
            "@cargo__vec_map__0_8_2//:vec_map",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(target_os = "macos")
        (
            "@rules_rust//rust/platform:i686-apple-darwin",
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:aarch64-apple-darwin",
        ): [
            "@cargo__core_foundation__0_6_4//:core_foundation",
            "@cargo__io_kit_sys__0_1_0//:io_kit_sys",
            "@cargo__vec_map__0_8_2//:vec_map",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(target_os = "windows")
        (
            "@rules_rust//rust/platform:i686-pc-windows-msvc",
            "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
        ): [
            "@cargo__rusty_xinput__1_2_0//:rusty_xinput",
            "@cargo__winapi__0_3_9//:winapi",
        ],
        "//conditions:default": [],
    }),
)
