"""
@generated
cargo-raze crate build file.

DO NOT EDIT! Replaced on runs of cargo-raze
"""

# buildifier: disable=load
load("@bazel_skylib//lib:selects.bzl", "selects")

# buildifier: disable=load
load(
    "@rules_rust//rust:defs.bzl",
    "rust_binary",
    "rust_library",
    "rust_proc_macro",
    "rust_test",
)

package(default_visibility = [
    # Public for visibility by "@raze__crate__version//" targets.
    #
    # Prefer access through "//cargo", which limits external
    # visibility to explicit Cargo.toml dependencies.
    "//visibility:public",
])

licenses([
    "notice",  # MIT from expression "MIT OR Apache-2.0"
])

# Generated Targets

# Unsupported target "halmark" with type "example" omitted

rust_library(
    name = "wgpu_hal",
    srcs = glob(["**/*.rs"]),
    aliases = {
        "@cargo__wgpu_types__0_12_0//:wgpu_types": "wgt",
        "@cargo__metal__0_23_1//:metal": "mtl",
        "@cargo__khronos_egl__4_1_0//:khronos_egl": "egl",
        "@cargo__d3d12__0_4_1//:d3d12": "native",
    },
    crate_features = [
        "ash",
        "bit-set",
        "block",
        "default",
        "dx12",
        "egl",
        "foreign-types",
        "gles",
        "glow",
        "gpu-alloc",
        "gpu-descriptor",
        "inplace_it",
        "libloading",
        "metal",
        "native",
        "range-alloc",
        "renderdoc",
        "renderdoc-sys",
        "vulkan",
    ],
    crate_root = "src/lib.rs",
    data = [],
    edition = "2018",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "crate-name=wgpu-hal",
        "manual",
    ],
    version = "0.12.4",
    # buildifier: leave-alone
    deps = [
        "@cargo__arrayvec__0_7_2//:arrayvec",
        "@cargo__ash__0_34_0_1_2_203//:ash",
        "@cargo__bit_set__0_5_2//:bit_set",
        "@cargo__bitflags__1_3_2//:bitflags",
        "@cargo__block__0_1_6//:block",
        "@cargo__foreign_types__0_3_2//:foreign_types",
        "@cargo__fxhash__0_2_1//:fxhash",
        "@cargo__glow__0_11_2//:glow",
        "@cargo__gpu_alloc__0_5_3//:gpu_alloc",
        "@cargo__gpu_descriptor__0_2_2//:gpu_descriptor",
        "@cargo__inplace_it__0_3_3//:inplace_it",
        "@cargo__log__0_4_14//:log",
        "@cargo__naga__0_8_5//:naga",
        "@cargo__parking_lot__0_11_2//:parking_lot",
        "@cargo__profiling__1_0_5//:profiling",
        "@cargo__range_alloc__0_1_2//:range_alloc",
        "@cargo__raw_window_handle__0_4_2//:raw_window_handle",
        "@cargo__renderdoc_sys__0_7_1//:renderdoc_sys",
        "@cargo__thiserror__1_0_30//:thiserror",
        "@cargo__wgpu_types__0_12_0//:wgpu_types",
    ] + selects.with_or({
        # cfg(any(target_os = "macos", target_os = "ios"))
        (
            "@rules_rust//rust/platform:i686-apple-darwin",
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:aarch64-apple-darwin",
            "@rules_rust//rust/platform:aarch64-apple-ios",
            "@rules_rust//rust/platform:x86_64-apple-ios",
        ): [
            "@cargo__core_graphics_types__0_1_1//:core_graphics_types",
            "@cargo__metal__0_23_1//:metal",
            "@cargo__objc__0_2_7//:objc",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(not(target_arch = "wasm32"))
        (
            "@rules_rust//rust/platform:i686-apple-darwin",
            "@rules_rust//rust/platform:i686-pc-windows-msvc",
            "@rules_rust//rust/platform:i686-unknown-linux-gnu",
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
            "@rules_rust//rust/platform:aarch64-apple-darwin",
            "@rules_rust//rust/platform:aarch64-apple-ios",
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-unknown-linux-gnueabi",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:i686-unknown-freebsd",
            "@rules_rust//rust/platform:powerpc-unknown-linux-gnu",
            "@rules_rust//rust/platform:s390x-unknown-linux-gnu",
            "@rules_rust//rust/platform:x86_64-apple-ios",
            "@rules_rust//rust/platform:x86_64-linux-android",
            "@rules_rust//rust/platform:x86_64-unknown-freebsd",
        ): [
            "@cargo__khronos_egl__4_1_0//:khronos_egl",
            "@cargo__libloading__0_7_3//:libloading",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(target_arch = "wasm32")
        (
            "@rules_rust//rust/platform:wasm32-unknown-unknown",
            "@rules_rust//rust/platform:wasm32-wasi",
        ): [
            "@cargo__js_sys__0_3_56//:js_sys",
            "@cargo__wasm_bindgen__0_2_79//:wasm_bindgen",
            "@cargo__web_sys__0_3_56//:web_sys",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(windows)
        (
            "@rules_rust//rust/platform:i686-pc-windows-msvc",
            "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
        ): [
            "@cargo__d3d12__0_4_1//:d3d12",
            "@cargo__winapi__0_3_9//:winapi",
        ],
        "//conditions:default": [],
    }),
)
