"""
@generated
cargo-raze crate build file.

DO NOT EDIT! Replaced on runs of cargo-raze
"""

# buildifier: disable=load
load("@bazel_skylib//lib:selects.bzl", "selects")

# buildifier: disable=load
load(
    "@rules_rust//rust:defs.bzl",
    "rust_binary",
    "rust_library",
    "rust_proc_macro",
    "rust_test",
)

package(default_visibility = [
    # Public for visibility by "@raze__crate__version//" targets.
    #
    # Prefer access through "//cargo", which limits external
    # visibility to explicit Cargo.toml dependencies.
    "//visibility:public",
])

licenses([
    "notice",  # Apache-2.0 from expression "Apache-2.0"
])

# Generated Targets
# buildifier: disable=out-of-order-load
# buildifier: disable=load-on-top
load(
    "@rules_rust//cargo:cargo_build_script.bzl",
    "cargo_build_script",
)

cargo_build_script(
    name = "cpal_build_script",
    srcs = glob(["**/*.rs"]),
    build_script_env = {
    },
    crate_features = [
        "wasm-bindgen",
    ],
    crate_root = "build.rs",
    data = glob(["**"]),
    edition = "2015",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "manual",
    ],
    version = "0.13.4",
    visibility = ["//visibility:private"],
    deps = [
    ] + selects.with_or({
        # cfg(all(target_arch = "wasm32", target_os = "unknown"))
        (
            "@rules_rust//rust/platform:wasm32-unknown-unknown",
        ): [
            "@cargo__js_sys__0_3_56//:js_sys",
            "@cargo__web_sys__0_3_56//:web_sys",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(any(target_os = "linux", target_os = "dragonfly", target_os = "freebsd"))
        (
            "@rules_rust//rust/platform:i686-unknown-linux-gnu",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-unknown-linux-gnueabi",
            "@rules_rust//rust/platform:i686-unknown-freebsd",
            "@rules_rust//rust/platform:powerpc-unknown-linux-gnu",
            "@rules_rust//rust/platform:s390x-unknown-linux-gnu",
            "@rules_rust//rust/platform:x86_64-unknown-freebsd",
        ): [
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(any(target_os = "macos", target_os = "ios"))
        (
            "@rules_rust//rust/platform:i686-apple-darwin",
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:aarch64-apple-darwin",
            "@rules_rust//rust/platform:aarch64-apple-ios",
            "@rules_rust//rust/platform:x86_64-apple-ios",
        ): [
            "@cargo__core_foundation_sys__0_8_3//:core_foundation_sys",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(target_os = "android")
        (
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:x86_64-linux-android",
        ): [
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(target_os = "ios")
        (
            "@rules_rust//rust/platform:aarch64-apple-ios",
            "@rules_rust//rust/platform:x86_64-apple-ios",
        ): [
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(target_os = "macos")
        (
            "@rules_rust//rust/platform:i686-apple-darwin",
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:aarch64-apple-darwin",
        ): [
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(target_os = "windows")
        (
            "@rules_rust//rust/platform:i686-pc-windows-msvc",
            "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
        ): [
        ],
        "//conditions:default": [],
    }),
)

# Unsupported target "android" with type "example" omitted

# Unsupported target "beep" with type "example" omitted

# Unsupported target "enumerate" with type "example" omitted

# Unsupported target "feedback" with type "example" omitted

# Unsupported target "record_wav" with type "example" omitted

rust_library(
    name = "cpal",
    srcs = glob(["**/*.rs"]),
    aliases = {
    },
    crate_features = [
        "wasm-bindgen",
    ],
    crate_root = "src/lib.rs",
    data = [],
    edition = "2015",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "crate-name=cpal",
        "manual",
    ],
    version = "0.13.4",
    # buildifier: leave-alone
    deps = [
        ":cpal_build_script",
        "@cargo__thiserror__1_0_30//:thiserror",
    ] + selects.with_or({
        # cfg(all(target_arch = "wasm32", target_os = "unknown"))
        (
            "@rules_rust//rust/platform:wasm32-unknown-unknown",
        ): [
            "@cargo__js_sys__0_3_56//:js_sys",
            "@cargo__wasm_bindgen__0_2_79//:wasm_bindgen",
            "@cargo__web_sys__0_3_56//:web_sys",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(any(target_os = "linux", target_os = "dragonfly", target_os = "freebsd"))
        (
            "@rules_rust//rust/platform:i686-unknown-linux-gnu",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-unknown-linux-gnueabi",
            "@rules_rust//rust/platform:i686-unknown-freebsd",
            "@rules_rust//rust/platform:powerpc-unknown-linux-gnu",
            "@rules_rust//rust/platform:s390x-unknown-linux-gnu",
            "@rules_rust//rust/platform:x86_64-unknown-freebsd",
        ): [
            "@cargo__alsa__0_5_0//:alsa",
            "@cargo__libc__0_2_114//:libc",
            "@cargo__nix__0_20_0//:nix",
            "@cargo__parking_lot__0_11_2//:parking_lot",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(any(target_os = "macos", target_os = "ios"))
        (
            "@rules_rust//rust/platform:i686-apple-darwin",
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:aarch64-apple-darwin",
            "@rules_rust//rust/platform:aarch64-apple-ios",
            "@rules_rust//rust/platform:x86_64-apple-ios",
        ): [
            "@cargo__core_foundation_sys__0_8_3//:core_foundation_sys",
            "@cargo__mach__0_3_2//:mach",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(target_os = "android")
        (
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:x86_64-linux-android",
        ): [
            "@cargo__jni__0_19_0//:jni",
            "@cargo__ndk__0_3_0//:ndk",
            "@cargo__ndk_glue__0_3_0//:ndk_glue",
            "@cargo__oboe__0_4_5//:oboe",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(target_os = "ios")
        (
            "@rules_rust//rust/platform:aarch64-apple-ios",
            "@rules_rust//rust/platform:x86_64-apple-ios",
        ): [
            "@cargo__coreaudio_rs__0_10_0//:coreaudio_rs",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(target_os = "macos")
        (
            "@rules_rust//rust/platform:i686-apple-darwin",
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:aarch64-apple-darwin",
        ): [
            "@cargo__coreaudio_rs__0_10_0//:coreaudio_rs",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(target_os = "windows")
        (
            "@rules_rust//rust/platform:i686-pc-windows-msvc",
            "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
        ): [
            "@cargo__lazy_static__1_4_0//:lazy_static",
            "@cargo__parking_lot__0_11_2//:parking_lot",
            "@cargo__winapi__0_3_9//:winapi",
        ],
        "//conditions:default": [],
    }),
)
